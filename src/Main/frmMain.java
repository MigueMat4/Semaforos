/**
 * Este programa implementa una aplicación de semáforos para la solución de
 * comunicación entre procesos. El problmea del productor-consumidor consiste
 * en un búfer de datos al cual acceden un productor y un consumidor, se debe
 * garantizar la exclusión mutua.
 */
package Main;
import java.util.concurrent.Semaphore; // Librería para semáforos en java
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Migue
 * @version 1.0
 * @since   2019-03-21
 */
public class frmMain extends javax.swing.JFrame {
    
    private static int bufer[] = new int[5]; // Número de ranuras en el búfer
    private static Semaphore mutex = new Semaphore(1, true); // Controla el acceso a la región crítica
    private static int vacias = 5; // Cuenta las ranuras vacías del búfer
    private static int llenas = 0; // Cuenta las ranuras llenas del búfer
    private Productor p = new Productor(); // Crea instancia de un nuevo hilo productor
    private Consumidor c = new Consumidor(); // Crea instancia de un nuevo hilo consumidor

    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblRegionCritica = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblEstadoProductor = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblEstadoConsumidor = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblEstadoSemaforo = new javax.swing.JLabel();
        btnProductor = new javax.swing.JButton();
        btnConsumidor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Búfer de datos:");

        lblRegionCritica.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        lblRegionCritica.setText("[0] [0] [0] [0] [0]");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Productor");

        lblEstadoProductor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEstadoProductor.setText("<Estado>");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Consumidor");

        lblEstadoConsumidor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEstadoConsumidor.setText("<Estado>");

        btnIniciar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Semáforo");

        lblEstadoSemaforo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEstadoSemaforo.setText("<Estado>");

        btnProductor.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnProductor.setText("Iniciar");
        btnProductor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductorActionPerformed(evt);
            }
        });

        btnConsumidor.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnConsumidor.setText("Iniciar");
        btnConsumidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsumidorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblEstadoProductor))
                            .addComponent(jLabel3))
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblEstadoSemaforo))))
                    .addComponent(jLabel1))
                .addGap(252, 252, 252))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnProductor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblEstadoConsumidor)
                            .addGap(25, 25, 25)))
                    .addComponent(btnConsumidor))
                .addGap(61, 61, 61))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(btnIniciar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(lblRegionCritica)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRegionCritica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(btnIniciar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProductor)
                    .addComponent(btnConsumidor))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEstadoProductor))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEstadoSemaforo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEstadoConsumidor)))
                .addGap(68, 68, 68))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:
        p.start(); // Inicia el hilo productor
        c.start(); // Inicia el hilo consumidor
        btnIniciar.setText("Iniciado");
        btnIniciar.setEnabled(false);
        btnProductor.setText("Iniciado");
        btnProductor.setEnabled(false);
        btnConsumidor.setText("Iniciado");
        btnConsumidor.setEnabled(false);
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnProductorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductorActionPerformed
        // TODO add your handling code here:
        p.start(); // Inicia el hilo productor
        btnIniciar.setText("Iniciado");
        btnIniciar.setEnabled(false);
        btnProductor.setText("Iniciado");
        btnProductor.setEnabled(false);
    }//GEN-LAST:event_btnProductorActionPerformed

    private void btnConsumidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsumidorActionPerformed
        // TODO add your handling code here:
        c.start(); // Inicia el hilo consumidor
        btnIniciar.setText("Iniciado");
        btnIniciar.setEnabled(false);
        btnConsumidor.setText("Iniciado");
        btnConsumidor.setEnabled(false);
    }//GEN-LAST:event_btnConsumidorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }
    
    public int up(int semaforo){
        semaforo++;
        return semaforo;
    }
    
    public int down(int semaforo){
        semaforo--;
        return semaforo;
    }
    
    public void insertar_elemento(int elemento){
        int pos = -1; // -1 para saber que realmente funciona la exclusión mutua
        for (int i=0; i<=4; i++)
        {
            if (bufer[i] == 0)
                pos = i;
        }
        bufer[pos] = elemento; // Si es -1 es porque no se logró la exclusión mutua
    }
    
    public int quitar_elemento(){
        int elemento;
        int pos = -1; // -1 para saber que realmente funciona la exclusión mutua
        for (int i=0; i<=4; i++)
        {
            if (bufer[i] != 0)
                pos = i;
        }
        elemento = bufer[pos]; // Si es -1 es porque no se logró la exclusión mutua
        bufer[pos] = 0;
        return elemento;
    }
    
    public void actualizarRegionCritica(){
        String texto = "";
        for (int i=0; i<=4; i++){
            texto += "[" + String.valueOf(bufer[i]) + "] ";
        }
        lblRegionCritica.setText(texto);
    }
    
    /**
    * Clases a utilizar
    */
    
    private class Productor extends Thread{
        public void run(){
            int elemento;
            while(true){ // Ciclo del productor
                elemento = this.producir_elemento(); // Genera un número para colocar en el búfer
                // Inicio semáforo vacias
                while (vacias<=0)
                    lblEstadoProductor.setText("Esperando ...");
                vacias = down(vacias);
                // Fin semáforo vacias
                try {
                    mutex.acquire(); // Entra a la región crítica
                    lblEstadoSemaforo.setText("Productor");
                } catch (InterruptedException ex) {
                    Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                insertar_elemento(elemento); // Coloca el nuevo elemento en el búfer
                lblEstadoProductor.setText(elemento + " insertado");
                actualizarRegionCritica();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                mutex.release(); // Sale de la región crítica
                llenas = up(llenas); // Incrementa la cuenta de ranuras llenas
            }
        }
    
        private int producir_elemento(){
            lblEstadoProductor.setText("Generando numero ...");
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            return (int)(Math.random() * 9) + 1;
        }
    }
    
    private class Consumidor extends Thread {
        public void run() {
            int elemento = 0;
            while(true){ // Ciclo del consumidor
                // Inicio semáforo llenas
                while (llenas<=0)
                    lblEstadoConsumidor.setText("Esperando ...");
                llenas = down(llenas);
                // Fin semáforo llenas
                try {
                    mutex.acquire(); // Entra a la región crítica
                    lblEstadoSemaforo.setText("Consumidor");
                } catch (InterruptedException ex) {
                    Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                elemento = quitar_elemento(); // Saca el elemento del búfer
                actualizarRegionCritica();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
                mutex.release(); // Sale de la región crítica
                vacias = up(vacias); // Disminuye la cuenta de ranuras llenas
                this.consumir_elemento(elemento);
            }
        }
        
        private void consumir_elemento(int elemento){
            lblEstadoConsumidor.setText("Consumiendo " + elemento);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("El cuadrado de " + elemento + " es " + Math.pow(elemento, 2));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsumidor;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnProductor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblEstadoConsumidor;
    private javax.swing.JLabel lblEstadoProductor;
    private javax.swing.JLabel lblEstadoSemaforo;
    private javax.swing.JLabel lblRegionCritica;
    // End of variables declaration//GEN-END:variables
}
